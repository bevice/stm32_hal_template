# Нужен cmake >=3.5
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)


ADD_DEFINITIONS(-DSTM32F103xB)

include(stm32.cmake)

PROJECT(stm32_hal_template)

## float version of printf()
#SET(PRINTF_FLOAT TRUE)


include_directories(${CMSIS_INCLUDE_DIRECTORIES})


# Вот этот кусок мне не нравится, но пока не придумал как сделать нормально
SET(HAL_CORTEX_MODULE_ENABLED TRUE)
SET(HAL_DMA_MODULE_ENABLED TRUE)
SET(HAL_FLASH_MODULE_ENABLED TRUE)
SET(HAL_RCC_MODULE_ENABLED TRUE)
SET(HAL_PWR_MODULE_ENABLED TRUE)
SET(HAL_GPIO_MODULE_ENABLED TRUE)
SET(HAL_ADC_MODULE_ENABLED TRUE)
SET(HAL_CRYP_MODULE_ENABLED TRUE)
SET(HAL_CAN_MODULE_ENABLED TRUE)
SET(HAL_CEC_MODULE_ENABLED TRUE)
SET(HAL_CRC_MODULE_ENABLED TRUE)
SET(HAL_DAC_MODULE_ENABLED TRUE)
SET(HAL_ETH_MODULE_ENABLED TRUE)
SET(HAL_I2C_MODULE_ENABLED TRUE)
SET(HAL_I2S_MODULE_ENABLED TRUE)
SET(HAL_IRDA_MODULE_ENABLED TRUE)
SET(HAL_IWDG_MODULE_ENABLED TRUE)
SET(HAL_NOR_MODULE_ENABLED TRUE)
SET(HAL_NAND_MODULE_ENABLED TRUE)
SET(HAL_PCCARD_MODULE_ENABLED TRUE)
SET(HAL_PCD_MODULE_ENABLED TRUE)
SET(HAL_HCD_MODULE_ENABLED TRUE)
SET(HAL_RTC_MODULE_ENABLED TRUE)
SET(HAL_SD_MODULE_ENABLED TRUE)
SET(HAL_MMC_MODULE_ENABLED TRUE)
SET(HAL_SDRAM_MODULE_ENABLED TRUE)
SET(HAL_SMARTCARD_MODULE_ENABLED TRUE)
SET(HAL_SPI_MODULE_ENABLED TRUE)
SET(HAL_SRAM_MODULE_ENABLED TRUE)
SET(HAL_TIM_MODULE_ENABLED TRUE)
SET(HAL_UART_MODULE_ENABLED TRUE)
SET(HAL_USART_MODULE_ENABLED TRUE)
SET(HAL_WWDG_MODULE_ENABLED TRUE)
SET(HAL_EXTI_MODULE_ENABLED TRUE)

add_subdirectory(drivers)
include(drivers/hal_defines.cmake)
####################################################

SET(STARTUP_SOURCES
        startup/system_f10xx.c
        startup/startup_stm32f10x_md.S
        )

SET(PROJECT_SOURCES
        src/main.c
        src/main.h
        src/clocker/clock.c
        src/clocker/clock.h
        )



#скрипт линковки и где его искать
SET(LD_SCRIPT stm32f103c8_flash.ld)
SET(LD_SCRIPTS_DIR ${PROJECT_SOURCE_DIR}/ld-scripts/)
SET(CMAKE_EXE_LINKER_FLAGS "-L${LD_SCRIPTS_DIR} -T${LD_SCRIPT} ${CMAKE_EXE_LINKER_FLAGS}")


# Добавляем пути поиска заголовочных файлов
INCLUDE_DIRECTORIES(
        ${PROJECT_SOURCE_DIR}/src/
)

# arm_math
add_definitions(-DARM_MATH_CM3)
link_directories(drivers/CMSIS/Lib/GCC)


# Собираем исходники пректа, модули, и т.д. в elf
ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}.elf
        ${STARTUP_SOURCES}
        ${PROJECT_SOURCES}
        )

target_link_libraries(${CMAKE_PROJECT_NAME}.elf stm32f1xx_ll)
target_link_libraries(${CMAKE_PROJECT_NAME}.elf stm32f1xx_hal)
target_link_libraries(${CMAKE_PROJECT_NAME}.elf arm_cortexM3l_math)
target_link_libraries(${CMAKE_PROJECT_NAME}.elf m)



# Конвертируем elf в hex и bin

ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} ARGS -Oihex ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.hex)
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} ARGS -Obinary ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.bin)
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_SIZE} ARGS --format=sysv ${CMAKE_PROJECT_NAME}.elf)
ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME}.elf POST_BUILD COMMAND ${CMAKE_SIZE} ARGS --format=berkeley ${CMAKE_PROJECT_NAME}.elf)

if(PRINTF_FLOAT)
    message(STATUS "Using float version of printf()")
    SET(CMAKE_EXE_LINKER_FLAGS
            "${CMAKE_EXE_LINKER_FLAGS} -u _printf_float")
endif()

